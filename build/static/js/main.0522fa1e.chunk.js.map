{"version":3,"sources":["Components/Signup/Signup.tsx","Components/Contact/Contact.tsx","Components/Submit/Submit.tsx","Stepper/Stepper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SignupSchema","Yup","shape","firstName","min","max","required","lastName","email","Signup","savedValues","handleNext","className","initialValues","validationSchema","onSubmit","values","console","log","errors","touched","autoComplete","name","placeholder","style","color","type","ContactSchema","message","Contact","handleBack","onClick","Submit","useStyles","makeStyles","theme","createStyles","root","width","backButton","marginRight","spacing","instructions","marginTop","marginBottom","HorizontalLabelPositionBelowStepper","classes","React","useState","activeStep","setActiveStep","steps","prevActiveStep","Stepper","background","alternativeLabel","map","label","Step","key","StepLabel","stepIndex","getStepContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0522fa1e.chunk.js","sourcesContent":["import React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport './Signup.css';\nimport { savedValues } from '../../Stepper/Stepper';\n\ninterface Props {\n  savedValues: [savedValues, React.Dispatch<React.SetStateAction<savedValues>>],\n  handleNext: () => void\n};\n\nconst SignupSchema = Yup.object().shape({\n  \n  firstName: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  \n  lastName: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  \n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required'),\n});\n\nconst Signup:React.FC<Props> = ({ savedValues, handleNext }) => {\n  return (\n    <div className='form'>\n      <Formik\n        initialValues={{\n          firstName: savedValues[0].firstName,\n          lastName: savedValues[0].lastName,\n          email: savedValues[0].email\n        }}\n        \n        validationSchema={SignupSchema}\n        \n        onSubmit={(values) => {\n          savedValues[1]({\n            ...savedValues[0],\n            firstName: values.firstName,\n            lastName: values.lastName,\n            email: values.email,\n          })\n          handleNext()\n          console.log(values);\n        }}\n      >\n        {({ errors, touched }) => (\n          <Form autoComplete='off' className='Form'>\n            <h1>Contact</h1>\n            <Field\n              name=\"firstName\"\n              className='inputBox'\n              placeholder='First Name'\n            />\n            {\n              errors.firstName && touched.firstName ? (\n                <div style={{ color: '#ff0047' }}>{errors.firstName}</div>\n              ) : null\n            }\n            <Field\n              name=\"lastName\"\n              className='inputBox'\n              placeholder='Last Name'\n            />\n            {\n              errors.lastName && touched.lastName ? (\n                <div style={{ color: '#ff0047' }}>{errors.lastName}</div>\n              ) : null\n            }\n            <Field\n              name=\"email\"\n              type=\"email\"\n              className='inputBox'\n              placeholder='Email'\n            />\n            {\n              errors.email && touched.email ? <div style={{ color: '#ff0047' }}>{errors.email}</div> : null\n            }\n            <button type=\"submit\" className='sign-btn'>Next</button>\n            <p className='forget'>Forgot Password? <i>Click here</i></p>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  )\n};\n\nexport default Signup;","import React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nimport '../Signup/Signup.css';\nimport { savedValues } from '../../Stepper/Stepper';\n\ninterface Props {\n  savedValues: [savedValues, React.Dispatch<React.SetStateAction<savedValues>>],\n  handleNext: () => void,\n  handleBack: () => void\n}\n\nconst ContactSchema = Yup.object().shape({\n  message: Yup.string()\n    .min(5, 'Too Short!')\n    .max(10000, 'Too Long!')\n    .required('Required')\n});\n\nconst Contact:React.FC<Props> = ({ savedValues, handleNext, handleBack }) => {\n  return (\n    <div className='form'>\n      <Formik\n        initialValues={{\n          message: savedValues[0].message,\n        }}\n        validationSchema={ContactSchema}\n        onSubmit={(values) => {\n          savedValues[1]({\n            ...savedValues[0],\n            message: values.message\n          })\n          handleNext()\n          console.log(values);\n        }}\n      >\n        {({ errors, touched }) => (\n          <Form className='Form'>\n            <h1>Your Message</h1>\n            <Field \n              className='inputBox'\n              name='message'\n              placeholder='Message...'\n            ></Field>\n            {\n              errors.message && touched.message ? (\n                <div style={{ color: '#ff0047' }}>{errors.message}</div>\n              ) : null\n            }\n            <button type=\"submit\" className='sign-btn'>Next</button>\n            <button onClick={handleBack} type=\"button\" className='sign-btn'>Back</button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default Contact;","import React from 'react'\nimport '../Signup/Signup.css';\nimport { savedValues } from '../../Stepper/Stepper';\n\ninterface Props {\n  savedValues: [savedValues, React.Dispatch<React.SetStateAction<savedValues>>],\n  handleBack: () => void\n}\n\nconst Submit: React.FC<Props> = ({savedValues, handleBack}) => {\n  console.log(savedValues[0]);\n  return (\n    <div className='form'>\n      <div className='Form'>\n        <h1>Thanks for your Query</h1>\n        <p style={{color: '#c7c7c7'}}>Name: {savedValues[0].firstName} {savedValues[0].lastName}</p>\n        <p style={{color: '#c7c7c7'}}>Email: {savedValues[0].email} </p>\n\n        <h1>Your Message</h1>\n        <p style={{color: '#c7c7c7'}}>Message: {savedValues[0].message}</p>\n        <button type=\"submit\" className='sign-btn'>Submit</button>\n        <button onClick={handleBack} type=\"button\" className='sign-btn'>Back</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Submit;","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Signup from '../Components/Signup/Signup';\nimport Contact from '../Components/Contact/Contact';\nimport Submit from '../Components/Submit/Submit';\n\nexport interface savedValues {\n  firstName: string,\n  lastName: string,\n  email: any,\n  message: string\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    backButton: {\n      marginRight: theme.spacing(1),\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  }),\n);\n\nfunction getSteps() {\n  return ['Your Info', 'Your Message', 'Sent  '];\n}\n\nexport default function HorizontalLabelPositionBelowStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const savedValues = React.useState({ firstName: '', lastName: '', email: '', message: '' });\n  console.log(savedValues[0]);\n\n  function getStepContent(stepIndex: number) {\n    switch (stepIndex) {\n      case 0:\n        return <Signup savedValues={savedValues} handleNext={handleNext} />;\n      case 1:\n        return <Contact savedValues={savedValues}  handleNext={handleNext} handleBack={handleBack} />;\n      case 2: \n        return <Submit savedValues={savedValues} handleBack={handleBack} />\n      default:\n        return 'Error ';\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper style={{background: '#131419'}} activeStep={activeStep} alternativeLabel>\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n      {\n        getStepContent(activeStep)\n      }\n    </div>\n  );\n};","import React from 'react';\nimport Stepper from './Stepper/Stepper'\n\nfunction App() {\n  return (\n    <div >\n      <Stepper />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}